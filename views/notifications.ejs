<style>
  /* Mobile-first approach for notifications */
  .notifications-card {
    width: 100%;
    border-radius: 1rem;
    margin-bottom: 20px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  
  /* Fix for scrolling container */
  .notification-scroll-container {
    height: 400px; /* Fixed height for mobile */
    overflow-y: scroll; /* Always show scroll */
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
    overscroll-behavior: contain; /* Prevent scroll chaining */
    border-top: 1px solid rgba(255,255,255,0.1);
    border-bottom: 1px solid rgba(255,255,255,0.1);
    background-color: rgba(33, 37, 41, 0.95);
  }
  
  /* Make list items more touch-friendly */
  .notification-item {
    padding: 15px;
    border-bottom: 1px solid rgba(255,255,255,0.1);
    background-color: rgba(33, 37, 41, 0.95);
    transition: all 0.2s ease;
  }
  
  .notification-item:hover {
    background-color: rgba(40, 45, 50, 0.95);
  }
  
  /* Override read notification style */
  .notification-item.text-muted.bg-light {
    background-color: rgba(50, 55, 60, 0.8) !important;
  }
  
  /* Text colors for better readability */
  .notification-item h6 {
    color: white !important;
  }
  
  .notification-item p {
    color: rgba(255, 255, 255, 0.8) !important;
  }
  
  .notification-item.text-muted h6,
  .notification-item.text-muted p {
    color: rgba(200, 200, 200, 0.8) !important;
  }
  
  /* Desktop adjustments */
  @media (min-width: 992px) {
    .notifications-card {
      width: 95%;
      max-width: 100%;
      margin: 0 auto 30px auto;
    }
    
    .notification-scroll-container {
      height: 500px; /* Taller on desktop */
    }
  }
  
  /* Icon colors for notifications */
  .icon-bg-primary { background-color: #0d6efd; }
  .icon-bg-success { background-color: #198754; }
  .icon-bg-danger { background-color: #dc3545; }
  .icon-bg-warning { background-color: #ffc107; }
  .icon-bg-info { background-color: #0dcaf0; }
  .icon-bg-secondary { background-color: #6c757d; }
</style>

<div class="container-fluid animate-fade-in">
    <div class="row mb-4">
        <div class="col-12">
            <h3 class="mb-4 animate-fade-in"><i class="fas fa-bell me-2"></i>Notifications</h3>
        </div>
    </div>

    <!-- Notifications List -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card animate-fade-in delay-1 notifications-card">
                <div class="card-header bg-primary d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 text-white"><i class="fas fa-bell me-2 text-white"></i>All Notifications</h5>
                    <button id="markAllReadBtn" class="btn btn-sm btn-light">
                        <i class="fas fa-check-double me-1"></i>Mark all as read
                    </button>
                </div>
                <div class="card-body p-0">
                    <div class="notification-scroll-container">
                    <div class="list-group list-group-flush" id="notificationsList">
                        <% if (notifications && notifications.items && notifications.items.length > 0) { %>
                            <% notifications.items.forEach(function(notification) { %>
                                <!-- Notification Item -->
                                <div class="list-group-item notification-item border-0 <%= notification.read ? 'text-muted' : '' %>" data-id="<%= notification.id %>">
                                    <div class="d-flex">
                                        <div class="rounded-circle icon-bg-<%= notification.bgColor %> p-2 me-3 text-white" style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                                            <i class="fas fa-<%= notification.icon %>"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="d-flex justify-content-between align-items-center mb-1">
                                                <h6 class="mb-0 <%= notification.read ? '' : 'fw-bold' %>"><%= notification.title %></h6>
                                                <small style="color: rgba(255, 255, 255, 0.6) !important;"><%= notification.time %></small>
                                            </div>
                                            <p class="mb-0"><%= notification.message %></p>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="list-group-item border-0 border-bottom text-center py-4" style="background-color: rgba(33, 37, 41, 0.95);">
                                <p class="mb-0" style="color: rgba(255, 255, 255, 0.7) !important;">No notifications to display</p>
                            </div>
                        <% } %>
                    </div>
                    </div>
                </div>
                <div class="card-footer text-center bg-dark">
                    <small style="color: rgba(255, 255, 255, 0.7) !important;">You've reached the end of your notifications</small>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // CSRF token for AJAX
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        // Mark all as read button functionality
        const markAllReadBtn = document.getElementById('markAllReadBtn');
        if (markAllReadBtn) {
            markAllReadBtn.addEventListener('click', function() {
                // Show loading state
                const originalText = markAllReadBtn.innerHTML;
                markAllReadBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
                markAllReadBtn.disabled = true;
                
                // Send AJAX request to mark all as read
                fetch('/mark-notifications-read', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-Token': csrfToken
                    },
                    credentials: 'same-origin'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update UI to show all notifications as read
                        const notificationItems = document.querySelectorAll('#notificationsList .list-group-item');
                        notificationItems.forEach(item => {
                            item.classList.add('text-muted');
                            item.classList.remove('bg-light'); // Remove light background to keep dark theme
                            const title = item.querySelector('h6');
                            if (title) title.classList.remove('fw-bold');
                        });
                        
                        // Remove notification badge from navbar
                        const badges = document.querySelectorAll('.notification-badge');
                        badges.forEach(badge => {
                            badge.style.display = 'none';
                        });
                        
                        // Clear notification dropdown menus
                        const dropdownItems = document.querySelectorAll('#notificationDropdown + .dropdown-menu .dropdown-item, #notificationDropdownMobile + .dropdown-menu .dropdown-item');
                        dropdownItems.forEach(item => {
                            item.classList.add('text-muted');
                            const title = item.querySelector('p');
                            if (title) title.classList.remove('fw-bold');
                        });
                        
                        // Show success message
                        showToast('Success', 'All notifications marked as read', 'success');
                    } else {
                        showToast('Error', 'Failed to mark notifications as read', 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error', 'An error occurred', 'danger');
                })
                .finally(() => {
                    // Restore button state
                    markAllReadBtn.innerHTML = originalText;
                    markAllReadBtn.disabled = false;
                });
            });
        }
        
        // Helper function to show toast notifications
        function showToast(title, message, type) {
            // Check if we have the toast container, if not create it
            let toastContainer = document.querySelector('.toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // Create toast element
            const toastEl = document.createElement('div');
            toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
            toastEl.setAttribute('role', 'alert');
            toastEl.setAttribute('aria-live', 'assertive');
            toastEl.setAttribute('aria-atomic', 'true');
            
            // Create toast content
            toastEl.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <strong>${title}:</strong> ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            // Add toast to container
            toastContainer.appendChild(toastEl);
            
            // Initialize and show toast
            const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
            toast.show();
            
            // Remove toast after it's hidden
            toastEl.addEventListener('hidden.bs.toast', function() {
                toastEl.remove();
            });
        }
    });
</script>
