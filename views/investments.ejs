<h3 class="mb-5">Your Investments</h3>

<div class="row">
    <!-- Balance Overview Card -->
    <div class="col-md-12">
        <div class="card mb-4 dark-card balance-card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="fas fa-wallet me-2"></i> Balance Overview</h5>
            </div>
            <div class="card-body dark-card-body">
                <div class="row">
                    <div class="col-md-4 text-center border-end">
                        <h6 class="text-muted mb-2">Current Balance</h6>
                        <h3 class="text-success"><%= balance.toFixed(2) %> USD</h3>
                    </div>
                    <div class="col-md-4 text-center border-end">
                        <h6 class="text-muted mb-2">Pending Withdrawals</h6>
                        <h3 class="text-warning">
                            <% 
                                let pendingWithdrawals = 0;
                                if (typeof withdrawalRequests !== 'undefined' && withdrawalRequests && withdrawalRequests.length > 0) {
                                    withdrawalRequests.forEach(function(req) {
                                        if (req.status === 'pending') {
                                            pendingWithdrawals += req.amount;
                                        }
                                    });
                                }
                            %>
                            <%= pendingWithdrawals.toFixed(2) %> USD
                        </h3>
                    </div>
                    <div class="col-md-4 text-center">
                        <h6 class="text-muted mb-2">Available for Withdrawal</h6>
                        <h3 class="text-primary"><%= balance.toFixed(2) %> USD</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Pending Withdrawal Requests -->
<% if (typeof withdrawalRequests !== 'undefined' && withdrawalRequests && withdrawalRequests.filter(req => req.status === 'pending').length > 0) { %>
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card border-warning">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0"><i class="fas fa-clock me-2"></i> Pending Withdrawal Requests</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead>
                            <tr>
                                <th>Request ID</th>
                                <th>Amount</th>
                                <th>Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% withdrawalRequests.filter(req => req.status === 'pending').forEach(function(request) { %>
                                <tr>
                                    <td><small class="text-muted"><%= request.requestId %></small></td>
                                    <td><strong class="text-warning">$<%= request.amount.toFixed(2) %></strong></td>
                                    <td><%= new Date(request.requestDate).toLocaleString() %></td>
                                    <td>
                                        <span class="badge bg-warning text-dark">Pending</span>
                                    </td>
                                    <td>
                                        <a href="/cancel-withdrawal/<%= request.requestId %>" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to cancel this withdrawal request? The funds will be returned to your balance.')">
                                            <i class="fas fa-times me-1"></i> Cancel
                                        </a>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer bg-light">
                <small class="text-muted">Pending withdrawals are typically processed within 24-48 hours. You can cancel a withdrawal request before it's processed.</small>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- Recent Withdrawal History -->
<% if (typeof withdrawalRequests !== 'undefined' && withdrawalRequests && withdrawalRequests.filter(req => req.status !== 'pending').length > 0) { %>
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card border-secondary">
            <div class="card-header bg-secondary text-white">
                <h5 class="mb-0"><i class="fas fa-history me-2"></i> Withdrawal History</h5>
            </div>
            <style>
                .withdrawal-history-table th,
                .withdrawal-history-table td {
                    color: white !important;
                }
                .withdrawal-history-table small {
                    color: rgba(255, 255, 255, 0.8) !important;
                }
            </style>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="text-white">
                            <tr>
                                <th class="text-white">Request ID</th>
                                <th class="text-white">Amount</th>
                                <th class="text-white">Request Date</th>
                                <th class="text-white">Processed Date</th>
                                <th class="text-white">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% withdrawalRequests.forEach(function(request) { 
                                let statusClass = '';
                                switch(request.status) {
                                    case 'approved': statusClass = 'bg-success'; break;
                                    case 'rejected': statusClass = 'bg-danger'; break;
                                    case 'cancelled': statusClass = 'bg-secondary'; break;
                                    default: statusClass = 'bg-info';
                                }
                            %>
                                <tr>
                                    <td><small class="text-light"><%= request.requestId %></small></td>
                                    <td><strong class="text-white">$<%= request.amount.toFixed(2) %></strong></td>
                                    <td class="text-white"><%= new Date(request.requestDate).toLocaleString() %></td>
                                    <td class="text-white"><%= request.processedDate ? new Date(request.processedDate).toLocaleString() : 'N/A' %></td>
                                    <td>
                                        <span class="badge <%= statusClass %>"><%= request.status.charAt(0).toUpperCase() + request.status.slice(1) %></span>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    
                    <!-- Withdrawal Pagination Controls -->
                    <% if (withdrawalTotalPages > 1) { %>
                    <nav aria-label="Withdrawal History Pagination">
                        <ul class="pagination justify-content-center mt-3 mb-2">
                            <li class="page-item <%= withdrawalCurrentPage <= 1 ? 'disabled' : '' %>">
                                <a class="page-link" href="?withdrawalPage=<%= withdrawalCurrentPage - 1 %>&depositPage=<%= depositCurrentPage || 1 %><%= isMobile ? '&mobile=true' : '' %>" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            <% for(let i = 1; i <= withdrawalTotalPages; i++) { %>
                                <li class="page-item <%= i === withdrawalCurrentPage ? 'active' : '' %>">
                                    <a class="page-link" href="?withdrawalPage=<%= i %>&depositPage=<%= depositCurrentPage || 1 %><%= isMobile ? '&mobile=true' : '' %>"><%= i %></a>
                                </li>
                            <% } %>
                            <li class="page-item <%= withdrawalCurrentPage >= withdrawalTotalPages ? 'disabled' : '' %>">
                                <a class="page-link" href="?withdrawalPage=<%= withdrawalCurrentPage + 1 %>&depositPage=<%= depositCurrentPage || 1 %><%= isMobile ? '&mobile=true' : '' %>" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                    <% } %>
                </div>
            </div>
            <div class="card-footer bg-light">
                <small class="text-muted"></small>
            </div>
        </div>
    </div>
</div>
<% } %>

<!-- Deposit History -->
<% if (typeof depositHistory !== 'undefined' && depositHistory && depositHistory.length > 0) { %>
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card border-primary dark-card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="fas fa-money-bill-wave me-2"></i> Deposit History</h5>
            </div>
            <style>
                .deposit-history-table th,
                .deposit-history-table td {
                    color: white !important;
                }
                .deposit-history-table small {
                    color: rgba(255, 255, 255, 0.8) !important;
                }
            </style>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0 deposit-history-table">
                        <thead class="text-white">
                            <tr>
                                <th class="text-white">Transaction ID</th>
                                <th class="text-white">Amount</th>
                                <th class="text-white">Deposit Date</th>
                                <th class="text-white">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% depositHistory.forEach(function(deposit) { 
                                let statusClass = '';
                                switch(deposit.status) {
                                    case 'completed': statusClass = 'bg-success'; break;
                                    case 'pending': statusClass = 'bg-warning text-dark'; break;
                                    case 'failed': statusClass = 'bg-danger'; break;
                                    default: statusClass = 'bg-info';
                                }
                            %>
                                <tr>
                                    <td><small class="text-light"><%= deposit.transactionId %></small></td>
                                    <td><strong class="text-white">$<%= deposit.amount.toFixed(2) %></strong></td>
                                    <td class="text-white"><%= new Date(deposit.depositDate).toLocaleString() %></td>
                                    <td>
                                        <span class="badge <%= statusClass %>"><%= deposit.status.charAt(0).toUpperCase() + deposit.status.slice(1) %></span>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    
                    <!-- Deposit Pagination Controls -->
                    <% if (depositTotalPages > 1) { %>
                    <nav aria-label="Deposit History Pagination">
                        <ul class="pagination justify-content-center mt-3 mb-2">
                            <li class="page-item <%= depositCurrentPage <= 1 ? 'disabled' : '' %>">
                                <a class="page-link" href="?depositPage=<%= depositCurrentPage - 1 %>&withdrawalPage=<%= withdrawalCurrentPage || 1 %><%= isMobile ? '&mobile=true' : '' %>" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            <% for(let i = 1; i <= depositTotalPages; i++) { %>
                                <li class="page-item <%= i === depositCurrentPage ? 'active' : '' %>">
                                    <a class="page-link" href="?depositPage=<%= i %>&withdrawalPage=<%= withdrawalCurrentPage || 1 %><%= isMobile ? '&mobile=true' : '' %>"><%= i %></a>
                                </li>
                            <% } %>
                            <li class="page-item <%= depositCurrentPage >= depositTotalPages ? 'disabled' : '' %>">
                                <a class="page-link" href="?depositPage=<%= depositCurrentPage + 1 %>&withdrawalPage=<%= withdrawalCurrentPage || 1 %><%= isMobile ? '&mobile=true' : '' %>" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>
<% } else { %>
<!-- Deposit History placeholder for when no deposits are available -->
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card border-primary dark-card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="fas fa-money-bill-wave me-2"></i> Deposit History</h5>
            </div>
            <div class="card-body dark-card-body text-center py-4">
                <p class="text-white mb-0"><i class="fas fa-info-circle me-2"></i> No deposit history available yet. Your deposit transactions will appear here once you make your first deposit.</p>
            </div>
        </div>
    </div>
</div>
<% } %>

<div class="row">
    <!-- Deposit Section -->
    <div class="col-md-6">
        <div class="card mb-4 dark-card deposit-card">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0"><i class="fas fa-arrow-down me-2"></i> Deposit</h5>
            </div>
            <div class="card-body dark-card-body">
                <p class="mb-3">To make a deposit, please send funds to your deposit wallet address assigned by the admin:</p>
                
                <% if (depositWallet) { %>
                    <div class="wallet-card deposit-wallet">
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1 wallet-address" style="word-break: break-all;">
                                <code><%= depositWallet %></code>
                            </div>
                            <button class="btn btn-sm btn-glow-success ms-2" onclick="copyToClipboard('<%= depositWallet %>')">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                <% } else { %>
                    <div class="wallet-card wallet-warning">
                        <p class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i> No deposit wallet address has been assigned to you yet. Please contact an admin.</p>
                    </div>
                <% } %>
                
                <div class="mt-4 instruction-box">
                    <h6 class="instruction-title"><i class="fas fa-info-circle me-2"></i>Deposit Instructions:</h6>
                    <ol class="mb-0 instruction-list">
                        <li>Copy your assigned deposit wallet address</li>
                        <li>Send funds to this address from your external wallet</li>
                        <li>Your balance will be updated once the transaction is confirmed</li>
                        <li>Minimum deposit: 10 USD</li>
                        <li>If you don't have a deposit wallet yet, please contact an admin</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Withdraw Section -->
    <div class="col-md-6">
        <div class="card mb-4 dark-card withdraw-card" id="withdrawCard">
            <div class="card-header bg-danger text-white">
                <h5 class="mb-0"><i class="fas fa-arrow-up me-2"></i> Withdraw</h5>
            </div>
            <div class="card-body dark-card-body" id="withdrawCardBody">
                <p class="mb-3 text-white">Request a withdrawal to your personal withdraw wallet address:</p>
                
                <% if (withdrawWallet) { %>
                    <div class="wallet-card withdraw-wallet">
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1 wallet-address" style="word-break: break-all;">
                                <code><%= withdrawWallet %></code>
                            </div>
                            <button class="btn btn-sm btn-glow-info ms-2" onclick="copyToClipboard('<%= withdrawWallet %>')">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                <% } else { %>
                    <div class="wallet-card wallet-warning">
                        <p class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i> You need to set up a withdraw wallet address before requesting withdrawals.</p>
                    </div>
                <% } %>
                
                <form action="/update-withdraw-wallet" method="post" class="mt-3">
                    <div class="form-outline mb-3">
                        <label for="withdrawWallet" class="form-label fw-bold" style="color: #17a2b8 !important; background-color: transparent !important;">Update Withdraw Wallet Address</label>
                        <input 
                            type="text" 
                            class="form-control dark-input" 
                            id="withdrawWallet" 
                            name="withdrawWallet" 
                            value="<%= withdrawWallet %>" 
                            placeholder="Enter your withdraw wallet address"
                        >
                    </div>
                    <button type="submit" class="btn btn-glow-info">Update Withdraw Wallet</button>
                </form>
                
                <form action="/request-withdraw" method="post" class="mt-4" id="withdrawForm">
                    <div class="form-outline mb-3">
                        <label for="amount" class="form-label fw-bold" style="color: #17a2b8 !important; background-color: transparent !important;">Withdraw Amount (USD)</label>
                        <input 
                            type="number" 
                            class="form-control dark-input" 
                            id="amount" 
                            name="amount" 
                            min="40" 
                            max="<%= balance %>" 
                            step="0.01" 
                            placeholder="Enter amount to withdraw (min: $40)"
                            <%= !withdrawWallet || balance < 40 ? 'disabled' : '' %>
                            required
                            oninput="validateWithdrawalAmount(this)"
                        >
                        <div class="form-text text-danger" id="amountError" style="display: none;"></div>
                    </div>
                    <button 
                        type="submit" 
                        class="btn btn-glow-danger" 
                        id="withdrawButton"
                        <%= !withdrawWallet || balance < 40 ? 'disabled' : '' %>
                    >
                        Request Withdrawal
                    </button>
                    
                    <% if (!withdrawWallet) { %>
                        <small class="d-block mt-2 text-info">Please set a withdraw wallet address first.</small>
                    <% } else if (balance < 40) { %>
                        <small class="d-block mt-2 text-warning">Minimum withdrawal amount is $40. Your balance is insufficient.</small>
                    <% } else { %>
                        <small class="d-block mt-2 text-info">Minimum withdrawal: $40. Maximum: $<%= balance.toFixed(2) %></small>
                    <% } %>
                </form>
                
                <div class="mt-4 instruction-box">
                    <h6 class="instruction-title"><i class="fas fa-info-circle me-2"></i>Withdrawal Information:</h6>
                    <ul class="mb-0 instruction-list">
                        <li>Minimum withdrawal: 40 USD</li>
                        <li>Processing time: 24-48 hours</li>
                        <li>Withdrawal fee: 2%</li>
                        <li>You cannot withdraw more than your available balance</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="text-center mt-4">
    <a href="/" class="btn btn-primary btn-glow">
        <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
    </a>
</div>

<script>
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(function() {
            // Create a temporary element for the success message
            const message = document.createElement('div');
            message.textContent = 'Copied to clipboard!';
            message.style.position = 'fixed';
            message.style.top = '20px';
            message.style.left = '50%';
            message.style.transform = 'translateX(-50%)';
            message.style.padding = '10px 20px';
            message.style.backgroundColor = '#28a745';
            message.style.color = 'white';
            message.style.borderRadius = '5px';
            message.style.zIndex = '9999';
            
            // Add the message to the body
            document.body.appendChild(message);
            
            // Remove the message after 2 seconds
            setTimeout(function() {
                document.body.removeChild(message);
            }, 2000);
        }).catch(function() {
            console.error('Failed to copy text');
        });
    }
    
    function validateWithdrawalAmount(input) {
        const amount = parseFloat(input.value);
        const userBalance = parseFloat('<%= balance %>'); // Parse as string first to avoid EJS template issues
        const minAmount = 40;
        const errorElement = document.getElementById('amountError');
        const withdrawButton = document.getElementById('withdrawButton');
        
        // Reset error state
        errorElement.style.display = 'none';
        withdrawButton.disabled = false;
        
        // Validate amount
        if (isNaN(amount)) {
            errorElement.textContent = 'Please enter a valid number';
            errorElement.style.display = 'block';
            withdrawButton.disabled = true;
            return false;
        }
        
        if (amount < minAmount) {
            errorElement.textContent = 'Minimum withdrawal amount is $' + minAmount;
            errorElement.style.display = 'block';
            withdrawButton.disabled = true;
            return false;
        }
        
        if (amount > userBalance) {
            errorElement.textContent = 'You cannot withdraw more than your available balance ($' + userBalance.toFixed(2) + ')';
            errorElement.style.display = 'block';
            withdrawButton.disabled = true;
            return false;
        }
        
        return true;
    }
    
    // Add form validation on submit
    document.addEventListener('DOMContentLoaded', function() {
        const withdrawForm = document.getElementById('withdrawForm');
        if (withdrawForm) {
            withdrawForm.addEventListener('submit', function(event) {
                const amountInput = document.getElementById('amount');
                if (!validateWithdrawalAmount(amountInput)) {
                    event.preventDefault();
                }
            });
        }
    });
</script>

<!-- Custom CSS for dark theme investment cards -->
<style>
    /* Dark theme cards */
    .dark-card {
        background-color: rgba(33, 37, 41, 0.8) !important;
        border: 1px solid rgba(95, 145, 255, 0.3) !important;
        border-radius: 10px !important;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .dark-card-body {
        background-color: rgba(33, 37, 41, 0.95) !important;
        color: #e0e0e0 !important;
    }
    
    /* Fix withdraw card text colors */
    .withdraw-card {
        color: #ffffff !important;
    }
    
    .withdraw-card p,
    .withdraw-card h6,
    .withdraw-card li,
    .withdraw-card .instruction-title {
        color: #ffffff !important;
    }
    
    .withdraw-card .text-muted {
        color: #adb5bd !important;
    }
    
    .withdraw-card .dark-input {
        background-color: rgba(20, 30, 50, 0.7) !important;
        color: #ffffff !important;
    }
    
    /* Card specific stylings */
    .balance-card .card-body {
        padding: 1.5rem;
    }
    
    /* Form label styling */
    .withdraw-card .form-label {
        color: #17a2b8 !important;
        background-color: transparent !important;
        display: inline-block;
        padding: 2px 0;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .deposit-card {
        border-left: 4px solid #28a745 !important;
    }
    
    .withdraw-card {
        border-left: 4px solid #dc3545 !important;
        box-shadow: 0 2px 10px rgba(220, 53, 69, 0.2);
    }
    
    /* Custom wallet cards */
    .wallet-card {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        word-break: break-all;
    }
    
    .deposit-wallet {
        background-color: rgba(40, 167, 69, 0.2);
        border: 1px solid rgba(40, 167, 69, 0.4);
    }
    
    .withdraw-wallet {
        background-color: rgba(23, 162, 184, 0.2);
        border: 1px solid rgba(23, 162, 184, 0.4);
    }
    
    .wallet-warning {
        background-color: rgba(255, 193, 7, 0.2);
        border: 1px solid rgba(255, 193, 7, 0.4);
    }
    
    /* Form elements */
    .dark-input {
        background-color: rgba(33, 37, 41, 0.6) !important;
        border: 1px solid rgba(95, 145, 255, 0.3) !important;
        color: #fff !important;
    }
    
    .dark-input::placeholder {
        color: rgba(255, 255, 255, 0.5) !important;
    }
    
    /* Instruction boxes */
    .instruction-box {
        background-color: rgba(20, 30, 50, 0.5);
        border-radius: 8px;
        padding: 1rem;
    }
    
    .instruction-title {
        color: #adb5bd;
        margin-bottom: 0.75rem;
    }
    
    .instruction-list li {
        margin-bottom: 0.3rem;
        color: #e0e0e0;
    }
    
    /* Fix specific elements in withdraw card */
    .withdraw-card .instruction-box {
        background-color: rgba(20, 30, 50, 0.7);
        border: 1px solid rgba(220, 53, 69, 0.3);
    }
    
    .withdraw-card .instruction-title {
        color: #fff;
    }
    
    .withdraw-card .instruction-list li {
        color: #fff;
    }
    
    /* Glow buttons */
    .btn-glow-success {
        background-color: rgba(40, 167, 69, 0.3);
        border: 1px solid rgba(40, 167, 69, 0.6);
        color: #fff;
        transition: all 0.3s ease;
    }
    
    .btn-glow-success:hover {
        background-color: rgba(40, 167, 69, 0.5);
        box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
        color: #fff;
    }
    
    .btn-glow-info {
        background-color: rgba(23, 162, 184, 0.3);
        border: 1px solid rgba(23, 162, 184, 0.6);
        color: #fff;
        transition: all 0.3s ease;
    }
    
    .btn-glow-info:hover {
        background-color: rgba(23, 162, 184, 0.5);
        box-shadow: 0 0 10px rgba(23, 162, 184, 0.5);
        color: #fff;
    }
    
    .btn-glow-danger {
        background-color: rgba(220, 53, 69, 0.3);
        border: 1px solid rgba(220, 53, 69, 0.6);
        color: #fff;
        transition: all 0.3s ease;
    }
    
    .btn-glow-danger:hover {
        background-color: rgba(220, 53, 69, 0.5);
        box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
        color: #fff;
    }
    
    .btn-glow {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 0 10px rgba(95, 145, 255, 0.5);
    }
    
    .btn-glow:hover {
        box-shadow: 0 0 20px rgba(95, 145, 255, 0.8);
        transform: translateY(-2px);
    }
    
    /* Code styling */
    code {
        background-color: rgba(33, 37, 41, 0.7);
        color: #e0e0e0;
        padding: 0.2rem 0.4rem;
        border-radius: 4px;
    }
    
    /* Mobile scrolling styles */
    @media (max-width: 767.98px) {
        #withdrawCardBody {
            overflow-y: auto !important;
            max-height: 400px !important;
            -webkit-overflow-scrolling: touch !important;
        }
    }
    
    /* Force mobile scrolling with !important flags */
    @media (max-width: 767.98px) {
        .withdraw-card {
            margin-bottom: 2rem !important;
            display: flex !important;
            flex-direction: column !important;
            max-height: 80vh !important;
        }
        
        .withdraw-card .card-header {
            flex-shrink: 0 !important;
        }
        
        .withdraw-card .card-body {
            height: 400px !important;
            max-height: 400px !important;
            overflow-y: scroll !important;
            padding: 1rem !important;
            display: block !important;
            overflow-x: hidden !important;
        }
        
        /* Improve spacing on mobile */
        .withdraw-card .instruction-box {
            margin-bottom: 1rem !important;
        }
        
        .withdraw-card form {
            margin-bottom: 1.5rem !important;
        }
        
        /* Custom scrollbar styling */
        .withdraw-card .card-body::-webkit-scrollbar {
            width: 5px !important;
        }
        
        .withdraw-card .card-body::-webkit-scrollbar-track {
            background: rgba(33, 37, 41, 0.3) !important;
            border-radius: 10px !important;
        }
        
        .withdraw-card .card-body::-webkit-scrollbar-thumb {
            background-color: rgba(220, 53, 69, 0.5) !important;
            border-radius: 10px !important;
        }
        
        /* Firefox scrollbar */
        .withdraw-card .card-body {
            scrollbar-width: thin !important;
            scrollbar-color: rgba(220, 53, 69, 0.5) rgba(33, 37, 41, 0.3) !important;
        }
        
        .instruction-box {
            padding: 0.75rem;
        }
        
        .instruction-list {
            padding-left: 1.5rem;
        }
        
        .dark-card-body {
            padding: 1rem;
        }
    }
</style>

<!-- Mobile detection for refreshing with correct parameters -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Check if the device is mobile
        const isMobile = window.innerWidth < 768;
        
        // Add mobile parameter only if device is mobile and we don't already have it
        if (isMobile && !window.location.href.includes('mobile=true')) {
            // Only redirect if we need to add the mobile parameter
            const separator = window.location.href.includes('?') ? '&' : '?';
            window.location.href = window.location.href + separator + 'mobile=true';
        } else if (!isMobile && window.location.href.includes('mobile=true')) {
            // Remove mobile parameter if on desktop but URL contains it
            let url = new URL(window.location.href);
            url.searchParams.delete('mobile');
            window.location.href = url.toString();
        }
        // We don't need to modify pagination links anymore since we're using
        // server-side detection and the isMobile flag in the template
    });
</script>

<!-- Direct mobile scroll implementation with inline styles -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const withdrawBody = document.getElementById('withdrawCardBody');
        
        // Add direct inline styles that override everything
        function applyMobileScrolling() {
            if (window.innerWidth <= 767.98) {
                // Force scrollable container properties
                withdrawBody.style.setProperty('max-height', '400px', 'important');
                withdrawBody.style.setProperty('overflow-y', 'scroll', 'important');
                withdrawBody.style.setProperty('-webkit-overflow-scrolling', 'touch', 'important');
                withdrawBody.style.setProperty('padding-right', '10px', 'important');
                withdrawBody.style.setProperty('padding-bottom', '20px', 'important');
                withdrawBody.style.setProperty('height', 'auto', 'important');
            } else {
                // Reset for desktop
                withdrawBody.style.removeProperty('max-height');
                withdrawBody.style.removeProperty('overflow-y');
                withdrawBody.style.removeProperty('-webkit-overflow-scrolling');
                withdrawBody.style.removeProperty('padding-right');
                withdrawBody.style.removeProperty('padding-bottom');
                withdrawBody.style.removeProperty('height');
            }
        }
        
        // Apply immediately
        applyMobileScrolling();
        
        // Apply on window resize
        window.addEventListener('resize', applyMobileScrolling);
        
        // Apply after window load (for safety)
        window.addEventListener('load', applyMobileScrolling);
        
        // Also apply after a delay to capture any lazy-loaded content
        setTimeout(applyMobileScrolling, 500);
        setTimeout(applyMobileScrolling, 1000);
    });
</script>
