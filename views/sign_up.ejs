<h3 class="mb-5 cosmic-title">Sign up</h3>
<form action="/create-user" id="create-user-form" method="post">
    <input type="hidden" name="_csrf" id="csrf_token" value="<%= csrfToken %>" />
    <div class="form-outline mb-4">
        <input type="text" name="name" id="name" required placeholder="Name" class="form-control cosmic-input" autocomplete="name" />
    </div>
    <div class="form-outline mb-4">
        <input type="email" name="email" id="email" required placeholder="Email" class="form-control cosmic-input" autocomplete="email" />
    </div>
    <div class="form-outline mb-4">
        <input type="password" name="password" id="password" required placeholder="Password" class="form-control cosmic-input" autocomplete="new-password" />
    </div>
    <div class="form-outline mb-4">
        <input type="password" name="confirm_password" id="confirm_password" required placeholder="Confirm password" class="form-control cosmic-input" autocomplete="new-password" />
    </div>
    <div class="form-outline mb-4">
        <!-- UI entry: national number only -->
        <input type="tel" id="phone" placeholder="Phone Number" class="form-control cosmic-input" aria-describedby="phone-error" aria-invalid="false" />
        <!-- Hidden e164 value sent to server -->
        <input type="hidden" name="phoneNumber" id="full_phone" />
        <div id="phone-info" class="mt-2 small cosmic-text text-start">We'll send a verification code to this number</div>
        <div id="phone-error" class="mt-2 small cosmic-text text-danger" style="display:none;">Please enter a valid phone number</div>
    </div>
    <div class="form-outline mb-4">
        <input type="text" name="invitation_code" id="invitation_code" placeholder="Invitation Code (Optional)" class="form-control cosmic-input" />
        <div id="inviter-info" class="mt-2 small cosmic-text"></div>
    </div>
    <button type="submit" class="btn cosmic-btn btn-lg btn-block" value="Sign up">Sign up</button>
    <br>
    <div class="d-flex align-items-center justify-content-center mt-4">
        <p class="mb-0 me-2 cosmic-text">Already have an account?</p>
        <a href="/sign-in" class="btn cosmic-btn">Sign in</a>
    </div>
</form>

<script>
    // Initialize phone input with country selector
    document.addEventListener('DOMContentLoaded', function() {
        const phoneInput = document.getElementById('phone');
        const fullPhoneInput = document.getElementById('full_phone');
        
        if (phoneInput) {
            // Initialize with IntlTelInput
            const iti = window.intlTelInput(phoneInput, {
                utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.19/js/utils.js",
                separateDialCode: true,
                initialCountry: "auto",
                // Auto-detect country via IP
                geoIpLookup: function(callback) {
                    fetch('/api/ip-geolocation')
                        .then(res => res.json())
                        .then(data => {
                            callback(data.country_code.toLowerCase());
                        })
                        .catch(err => {
                            const lang = navigator.language || navigator.userLanguage || '';
                            const region = lang.includes('-') ? lang.split('-')[1] : lang;
                            callback(region.toLowerCase() || 'us');
                        });
                },
                preferredCountries: ["us", "gb", "ca", "au", "fr", "de"],
                customPlaceholder: function(selectedCountryPlaceholder, selectedCountryData) {
                    return "Phone number";
                }
            });
            
            // Initial formatting & log after country detection
            updateFullPhone();
            
            // Central update function for full phone and styling
            function updateFullPhone() {
                // Try explicit E.164 format
                let number = '';
                if (window.intlTelInputUtils && window.intlTelInputUtils.numberFormat) {
                    number = iti.getNumber(window.intlTelInputUtils.numberFormat.E164);
                } else {
                    number = iti.getNumber();
                }
                fullPhoneInput.value = number || '';
                const hasRaw = phoneInput.value.trim() !== '';
                const valid = number && iti.isValidNumber();
                // Toggle classes and error message
                phoneInput.classList.toggle('is-valid', valid);
                phoneInput.classList.toggle('is-invalid', hasRaw && !valid);
                const errorDiv = document.getElementById('phone-error');
                if (hasRaw && !valid) {
                    errorDiv.style.display = 'block';
                    phoneInput.setAttribute('aria-invalid','true');
                } else {
                    errorDiv.style.display = 'none';
                    phoneInput.setAttribute('aria-invalid','false');
                };
            }
            // On user input or country change, update hidden E.164
            phoneInput.addEventListener('input', updateFullPhone);
            phoneInput.addEventListener('countrychange', function() {
                updateFullPhone();
            });
            
            // Style the country selector to match cosmic theme
            const countrySelectorElements = document.querySelectorAll('.iti__flag-container, .iti__selected-flag');
            countrySelectorElements.forEach(el => {
                el.style.backgroundColor = 'rgba(20, 30, 50, 0.3)';
                el.style.borderRadius = '8px 0 0 8px';
                el.style.borderRight = '1px solid rgba(95, 145, 255, 0.3)';
            });
            
            // Set up invitation code validation on blur
            const invitationCodeInput = document.getElementById('invitation_code');
            const inviterInfoDiv = document.getElementById('inviter-info');
            
            // Function to validate invitation code
            async function validateInvitationCode(code) {
                if (!code || code.trim() === '') {
                    inviterInfoDiv.innerHTML = '';
                    return { valid: true }; // Empty code is valid (it's optional)
                }
                
                inviterInfoDiv.innerHTML = '<span class="text-muted"><i class="fas fa-spinner fa-spin me-1"></i> Checking invitation code...</span>';
                
                try {
                    // Add a timestamp to prevent caching
                    const timestamp = new Date().getTime();
                    // Get CSRF token from the form
                    const csrfToken = document.getElementById('csrf_token') ? document.getElementById('csrf_token').value : '';
                    
                    const response = await fetch(`/check-invitation-code`, {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'Cache-Control': 'no-cache',
                            'CSRF-Token': csrfToken,
                            'X-CSRF-Token': csrfToken
                        },
                        body: JSON.stringify({ 
                            code: code.trim(),
                            _csrf: csrfToken
                        })
                    });
                    
                    // Handle HTTP errors
                    // Check if response is valid JSON
                    let data;
                    try {
                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('application/json')) {
                            const errorText = await response.text().catch(() => 'Unknown error');
                            console.error('Invalid content type:', contentType, 'Response:', errorText);
                            inviterInfoDiv.innerHTML = '<span class="text-danger"><i class="fas fa-exclamation-circle me-1"></i> Server error - please try again</span>';
                            return { valid: false, message: 'Server error - invalid response' };
                        }
                        
                        data = await response.json();
                    } catch (parseError) {
                        console.error('JSON parse error:', parseError);
                        inviterInfoDiv.innerHTML = '<span class="text-danger"><i class="fas fa-exclamation-circle me-1"></i> Invalid response from server</span>';
                        return { valid: false, message: 'Invalid response' };
                    }
                    
                    if (!response.ok) {
                        console.error('Server error:', response.status, data);
                        inviterInfoDiv.innerHTML = '<span class="text-danger"><i class="fas fa-exclamation-circle me-1"></i> Server error - please try again</span>';
                        return { valid: false, message: 'Server error' };
                    }
                    
                    // Log the response
                    console.log('Invitation code response:', data);
                    
                    if (!data.success) {
                        inviterInfoDiv.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i> ${data.message}</span>`;
                        return { valid: false, message: data.message };
                    }
                    
                    // Success!
                    inviterInfoDiv.innerHTML = `<span class="text-success"><i class="fas fa-check-circle me-1"></i> ${data.message}</span>`;
                    return { valid: true, data };
                    
                } catch (err) {
                    console.error('Error checking invitation code:', err);
                    inviterInfoDiv.innerHTML = '<span class="text-danger"><i class="fas fa-times-circle me-1"></i> Network error - please check your connection</span>';
                    return { valid: false, message: 'Network error' };
                }
            }
            
            // Add blur event for real-time validation
            if (invitationCodeInput) {
                invitationCodeInput.addEventListener('blur', function() {
                    const code = invitationCodeInput.value.trim();
                    validateInvitationCode(code);
                });
            }
            
            // ensure hidden e164 is current and validate invitation code before submit
            const form = document.getElementById('create-user-form');
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                const submitBtn = form.querySelector('button[type="submit"]');
                submitBtn.disabled = true;
                updateFullPhone();
                // client-side phone validation
                const phoneInput = document.getElementById('phone');
                if (!iti.isValidNumber()) {
                    const errorDiv = document.getElementById('phone-error');
                    errorDiv.style.display = 'block';
                    phoneInput.setAttribute('aria-invalid', 'true');
                    return;
                }
                const code = document.getElementById('invitation_code').value.trim();
                const inviterInfoDiv = document.getElementById('inviter-info');
                inviterInfoDiv.innerHTML = '';
                if (code) {
                    // Use our validation function
                    const result = await validateInvitationCode(code);
                    if (!result.valid) {
                        submitBtn.disabled = false;
                        return;
                    }
                    // Valid code, proceed with form submission
                }
                // no code or valid, proceed
                form.submit();
            });
        }
    });
</script>
